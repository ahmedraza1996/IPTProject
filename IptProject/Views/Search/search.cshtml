@{
    ViewBag.Title = "Search";
    Layout = "~/Views/Shared/_PortalLayout.cshtml";

}
<link href="~/Content/tagsinput.css" rel="stylesheet" />
<script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.11.0/umd/popper.min.js" integrity="sha384-b/U6ypiBEHpOf/4+1nzFpr53nxSS+GLCkfwBdFNTxtclqqenISfwAzpKaMNFNmj4" crossorigin="anonymous"></script>
<script src="https://unpkg.com/popperjs/core2" integrity="sha384-h0AbiXch4ZDo7tp9hKZ4TsHbi047NrKGLO3SEJAg45jXxnGIfYzk4Si90RDIqNm1" crossorigin="anonymous"></script>
<script src="~/Scripts/tags.js"></script>

<style>


    .modalcontainer{
        border: 1px solid blue;
        padding:2rem
    }
    /* The Modal (background) */
    .modal {
        display: none; /* Hidden by default */
        position: fixed; /* Stay in place */
        z-index: 1; /* Sit on top */
        left: 0;
        top: 0;
        width: 100%; /* Full width */
        height: 100%; /* Full height */
        overflow: auto; /* Enable scroll if needed */
        background-color: rgb(0,0,0); /* Fallback color */
        background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
    }

    /* Modal Content/Box */
    .modal-content {
        background-color: #fefefe;
        margin: 15% auto; /* 15% from the top and centered */
        padding: 20px;
        border: 1px solid #888;
        width: 80%; /* Could be more or less, depending on screen size */
    }

    /* The Close Button */
    .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }
    .fypdiv {
        margin-top:2rem
    }
    .hints {
        font-family: "Times New Roman";
        border: 0.1px solid rgba(0,0,0,0.2);
        margin-top: 20px;
        padding: 10px;
        color: rgb(128, 128, 128)
    }

    .button-search {
        display: flex;
        justify-content: center
    }

    .search-fyp {
        border-radius: 100px;
        text-align: center;
        padding: 10px;
        width: 100%;
        border: 0.1px solid rgb(255, 0, 0)
    }

    .inner-fypsearch {
        margin: 20px;
        padding: 100px
    }

    .badge_title {
        border: 1px solid gray;
        padding: 1rem;
        font-size: 0.8em;
        color: darkgrey;
        margin-bottom: 0.5rem;
        margin-top: 2rem;
        background-color: white
    }

    .fypstudentsearch {
        display: none;
        margin-bottom: 2rem;
        margin-top: 4rem;
        background-color: rgb(250, 250, 250);
        padding-bottom: 1rem;
        box-shadow: 0px 0px 8px 5px rgba(0,0,0,0.1);
    }

    #fypmetadatasearch {
        display: none;
    }

    .tableRow {
        margin-top: 3rem;
    }

    .btn {
        margin-top: 1rem;
    }

    .search {
    }

    .radiodiv {
        margin-top: 1rem;
    }

    .option {
        margin-left: 0.5rem;
        margin-right: 1rem;
    }

    .default-search {
        display: block;
        margin-top: 2rem;
    }

    .inputdiv {
        margin-bottom: 2rem;
    }

    .radiobuttons {
        display: flex;
        border: 1px solid rgba(0,0,0,0.2);
        border-radius: 10px;
        margin-top: 2rem;
        margin-bottom: 2rem;
        flex-wrap: wrap;
        width: 100%;
        box-shadow: rgba(0,0,0,0.2) 1px 5px;
    }



    .option {
        padding: 1rem;
    }
</style>


<div class="container-fluid" style="margin-top:2rem;">
    <div class="menu">

        <button onclick='display("defaultsearch")' id="defaultsearchBtn" class="btn btn-primary form-check-inline my-2 my-sm-0">Default Search</button>
        
        
        <button hidden onclick='display("fypstudentsearch")' id="fypstudentsearchBtn" class="btn btn-outline-primary form-check-inline my-2 my-sm-0">Student Search</button>
        
        
        <button onclick='display("fypmetadatasearch")' id="fypmetadatasearchBtn" class="btn btn-outline-primary form-check-inline my-2 my-sm-0">FYP Metadata Search</button>

    </div>
</div>

<div class="container-fluid fypstudentsearch" id="fypstudentsearch">
    <div class="row">

        <div class="col-lg-3">


            <span class="badge_title badge badge-light">Student Name</span>

            <select id="student_names" class="tagsinput" multiple data-role="tagsinput">
                <option value="2016">ahmed</option>
                <option value="2017">raza</option>
                <option value="2018">2018</option>
            </select>
        </div>





    </div>
    <div class="row">
        <div class="col-lg-4">

            <span class="badge_title badge badge-light">GPA</span>
            <!-- Default checked -->

            <div class="custom-control custom-radio">
                <input onclick="showRangeInput('range')" type="radio" class="custom-control-input" id="range" name="defaultExampleRadios" checked>
                <label class="custom-control-label" for="range">Range</label>
            </div>

            <div class="form-check-inline" style="width:50%;">
                <input disabled id="minRange" min="0.0" max="4.0" type="number" class="form-control" style="margin-right:1rem;" />
                <input disabled id="maxRange" min="0.0" max="4.0" type="number" class="form-control" />
            </div>

            <div class="custom-control custom-radio">
                <input onclick="showRangeInput('exact')" type="radio" class="custom-control-input" id="greater" name="defaultExampleRadios">
                <label class="custom-control-label" for="greater">Greater Than</label>
            </div>

            <!-- Default checked -->
            <div class="custom-control custom-radio">
                <input onclick="showRangeInput('exact')" type="radio" class="custom-control-input" id="less" name="defaultExampleRadios" checked>
                <label class="custom-control-label" for="less">Less Than</label>
            </div>

            <div class="form-check-inline" style="width:50%;">
                <input id="exactValue" min="0.0" max="4.0" type="number" class="form-control" style="margin-right:1rem;" />
            </div>



        </div>
    </div>

    <button onclick="postFypStudentSearch()" class="btn btn-success"> Search </button>

</div>

<div class="inner-fypsearch" id="fypmetadatasearch">
    <div class="row">
        <div class="col-lg-12">
            <input id="fypsearchbox" class="search-fyp form-check-inline" />
            <div class="button-search">
                <button onclick="findFypMetaData()" class=" btn btn-outline-primary btn-md"> Search </button>

            </div>
        </div>

    </div>
    <div class="row">
        <div class="col-lg-12">
            <div class="hints">
                <p>Hint: Boolean Query: mehdi and saad and ismail</p>
                <p>Hint: Proximity Query: mehdi saad /1</p>
                <p>Hint: General Text Query: Some text here</p>
            </div>
        </div>
    </div>

    <div class="fypdiv row">
        <div class="col-lg-12">
            <table class="table">

                <thead id="fypQueryHeaders" class="thead-dark">

                </thead>

                <tbody id="fypQueryRows" class="table-bordered"></tbody>
            </table>
        </div>
    </div>

    <div class="row" id="modalcontainer">

        <div class="col-lg-6" id="abstractdatacontainer">

        </div>

    </div>
</div>


<div class="container-fluid " id="defaultsearch">
    <div class="row ">
        <div class="col-lg-12 inputdiv">
            <div>
                <div>
                    <form class="form-inline">
                        <div>
                            <input id="searchText" onkeyup="success()" class="search form-control mr-sm-2 mt-3" type="search" placeholder="Search" aria-label="Search">
                        </div>

                        <div class="dropdown form-inline">
                            <button id="dropDownButton" onclick="onClickDropDown()" type="button" class="btn btn-success dropdown-toggle" data-toggle="dropdown">
                                Select Table
                            </button>
                            <div id="dropdown" class="dropdown-menu">

                            </div>
                        </div>

                        <div id="optionsDiv" class="radiobuttons p-5">
                            <div id="selectoptions">Select a Table To Display Search Criteria</div>
                        </div>

                        <div class="mt-3 align-baseline">
                            <button disabled id="searchButton" class="btn btn-outline-success form-check-inline my-2 my-sm-0" type="button" onclick="sendPostRequest()">Search</button>

                        </div>

                    </form>
                    <p id="demo"></p>
                </div>
            </div>
        </div>


        <div class="col-md-12">
            <div>
                <table id="EmployeeTable" class="table">
                    <thead class="thead-dark">
                        <tr id="attributeheads"></tr>
                    </thead>

                    <tbody id="tablebodydata"></tbody>
                </table>
            </div>
        </div>

       


    </div>



    
</div>






<script type="text/javascript">

    var baseUrlDefaultSearch = @Html.Raw(Json.Encode(ViewData["baseUrlDefaultSearch"]));
    var baseUrlFYPSearch = @Html.Raw(Json.Encode(ViewData["baseUrlFYPSearch"]));
    var UpdateIndex = @Html.Raw(Json.Encode(ViewData["UpdateIndexGet"]));

    sendUpdateIndexRequest = async () => {

        response = await new Promise(resolve => {


            var xhr = new XMLHttpRequest();
            xhr.open("GET", UpdateIndex, true);
            xhr.setRequestHeader("Content-Type", "application/json");

            xhr.onload = function (e) {
                resolve(xhr.response);
            };
            xhr.onerror = function () {
                resolve(undefined);
                console.error("** An error occurred during the XMLHttpRequest");
            };
            xhr.send(null);
        })
        console.log(response);
    }

    this.sendUpdateIndexRequest();



    

    console.log(baseUrlDefaultSearch);
    var database = {};

    getMyTable = async (data) => {
        
                 response = await new Promise(resolve => {
                   

                    var xhr = new XMLHttpRequest();
                     xhr.open("POST", baseUrlDefaultSearch, true);
                    xhr.setRequestHeader("Content-Type", "application/json");

                    xhr.onload = function (e) {
                        resolve(xhr.response);
                    };
                    xhr.onerror = function () {
                        resolve(undefined);
                        console.error("** An error occurred during the XMLHttpRequest");
                    };
                    xhr.send(JSON.stringify(data));
         })


        console.log("Database efore calling apis : " + JSON.stringify(database));

        database_cols = JSON.parse(response)


        console.log("=================== > >  > > > >INIT\n")
        console.log("------\n")
        var tableName = data.TableName;
        var columns = database_cols;

        console.log(tableName);
        console.log(columns)



        if (tableName === "Employee") {
            database[tableName] = []

            // console.log("-- EMPLOYEE IF CONDITION DATA ----\n")
            //console.log(data)
            //console.log("COLUMNS\n")
            //console.log(columns)


            // console.log(tableName)
            for (var i in columns) {
                //console.log(columns[i]['COLUMN_NAME'])
                if (columns[i]['COLUMN_NAME'] == "EmpName" || columns[i]['COLUMN_NAME'] == "Email" || columns[i]['COLUMN_NAME'] == "DesignationTitle" || columns[i]['COLUMN_NAME'] == "DepartmentID") {
                    database[tableName].push(columns[i]['COLUMN_NAME']);
                }
            }


            database[tableName].push("Name Contains");
            database[tableName].push("Name Starts With");
            database[tableName].push("Instructors by Course Name");
            database[tableName].push("Instructors by Course CODE");
            database[tableName].push("Instructor by Designation ID");


          
        }

        // console.log("DATABASE =============================\n")
        //console.log(database)

        if (tableName === "Course") {

            database[tableName] = []


            //database[tableName].push("Course ID");
            database[tableName].push("Course Taught By");
            //database[tableName].push("Course Taught In Semester");

        }

        if (tableName === "Student") {
            console.log("in student table")
            database[tableName] = []


            database[tableName].push("By Name Contains");
            //database[tableName].push("By CourseName");
            //database[tableName].push("By CourseCode");


            database[tableName].push("By ID");
            database[tableName].push("By BatchID");
            database[tableName].push("By Department");
            database[tableName].push("By Section");
            database[tableName].push("By NU-Mail");
            database[tableName].push("By Primary Email");


            //Non Query 
            database[tableName].push("By Skill");
            //database[tableName].push("By Domain");


        }



        //console.log("--------------------------------------------------\n")

      //  console.log(tableNames);

        console.log("\n\n\nDatabase after calling apis : " + JSON.stringify(database));


        //console.log(database)
    }


    var employeeParams = {
        "actionName": "GetTableSchema",

        "TableName": "Employee"
    }

    
    var courseParams = {
        "actionName": "GetTableSchema",

        "TableName": "Course"
    }
    

    var studentParams = {
        "actionName": "GetTableSchema",
        "TableName" : "Student" 
    }


    /**
    this.getMyTable(courseParams).then(function () {
        this.getMyTable(studentParams);

    });
    this.getMyTable(employeeParams).then(function () {
        this.populateDropDown(database);

    });;
    **/



    this.getMyTable(courseParams).then(function () {
        this.getMyTable(studentParams).then(function () {
            this.getMyTable(employeeParams).then(function () {
                this.populateDropDown(database);

            })
        });

    });
   

   
    

    function populateDropDown(database) {
        console.log("Populating database dropdowns")
        var DropDownTableNames = Object.keys(database)
        //console.log("IN POPULATE DROPDOWN")
        var dropdown = document.getElementById("dropdown");


        console.log("In drop down:::::::\n")
        console.log(database)

        

        for (i = 0; i < DropDownTableNames.length; i++) {
          //  console.log("FOR LOOP")
            //console.log(tableNames[i])
            console.log("COUNT:" + i)
            console.log(DropDownTableNames[i])
            dropdown.innerHTML += '<a onclick = "dropDownSet(this)" class="dropdown-item" href = "#" >' + DropDownTableNames[i] + '</a >'
        }
        //console.log("OUT OF  POPUPLSATE DROPWDOWN")
    }


    //var EmployeeColumns = GetSchemaAndColumnFromDatabase("Employee")


    

    /**

     * This is where you will load your DATABASE TABLE-NAMES and their respective ATTRIBUTES in a dictionary.
     * KeyValuePair "TableName" : ["attr1","attr2","attr3"]
     * Below is a dummy database schema
    **/


    /**
     *
     *  <label class="form-check-label">
                                <input type="checkbox" class="form-check-input" value="">
                                <span class="option">Optssssio</span>
                            </label>
     *
     *  **/


    //var InstructorSchema = {}

    var isTextInserted = false;
    var isDropDownSelected = false;





     
    findFypMetaData = async (data) => {

        response = await new Promise(resolve => {


            var xhr = new XMLHttpRequest();
            xhr.open("POST", baseUrlFYPSearch, true);
            xhr.setRequestHeader("Content-Type", "application/json");

            xhr.onload = function (e) {
                resolve(xhr.response);
            };
            xhr.onerror = function () {
                resolve(undefined);
                console.error("** An error occurred during the XMLHttpRequest");
            };

            var query = document.getElementById("fypsearchbox").value;
            if (query == "" || query == undefined) {
                alert("Search Term Must not be empty")
            } else {

                var data = {
                    "query": query,
                    "queried_by_username":"UserNameFYPSearch"
                }
            }
            xhr.send(JSON.stringify(data));
        })

        populateFypTable(JSON.parse(response));

    }



    function populateFypTable(response) {
        console.log("Populating Fyp Datable")
        console.log(response)

        var headerValues = Object.keys(response[0]);


        console.log(headerValues);
        


        /** 
         *  
         *  <table class="table">

                <thead id="fypQueryHeaders" class="thead-dark">

                </thead>

                <tbody id="fypQueryRows" class="table-bordered">

                </tbody>
            </table>
         *  
         *  
         *  **/

        var fypTableHeaders = document.getElementById("fypQueryHeaders");
        fypTableHeaders.innerHTML = "";

        var innerHtmlHeaders = "";

        innerHtmlHeaders += "<tr>"

        for ( i = 0; i < headerValues.length; i++) {
            innerHtmlHeaders += "<th>" + headerValues[i] + "</th>";

        }
        innerHtmlHeaders += "</tr>"

        fypTableHeaders.innerHTML = innerHtmlHeaders;

        var fypQueryRows = document.getElementById("fypQueryRows");
        fypQueryRows.innerHTML = "";

        var rowInnerHtml = "";

        for (i = 0; i < response.length; i++) {
            rowInnerHtml += "<tr>"
            rowInnerHtml += "<td class='info'>" + response[i].supervisor + "</td>";
            rowInnerHtml += "<td class='info'>" + response[i].member1 + "</td>";
            rowInnerHtml += "<td class='info'>" + response[i].member2 + "</td>";
            rowInnerHtml += "<td class='info'>" + response[i].member3 + "</td>";
            rowInnerHtml += "<td class='info'>" + response[i].title + "</td>";
            rowInnerHtml += "<td id='row" + i + "'" + " class='info'>" + (response[i].description).slice(0, 6) + "...  <button id='myBtn' onclick='showModalForAbstract(" + '"' + response[i].description + '"'+")' class='btn btn-primary btn-sm'>Show</button></td>";

            rowInnerHtml += "</tr>"
        }


        fypQueryRows.innerHTML = rowInnerHtml;

    }

    

    function showModalForAbstract(abstractFyp) {

        var AbstractDataContainer = document.getElementById("abstractdatacontainer");

        var abstractParagraph = "<hr><h2>Abstract</h2>";
        abstractParagraph += "<p class='abstractParagraph'>" + abstractFyp + "</p>"

        AbstractDataContainer.innerHTML = abstractParagraph;

        console.log(abstractFyp);
    }



    getDataBasedOnCheckedBoxes = async (data,actionName) => {

        console.log("********ACTION NAME IN GET DATABASED : =>>>>", + "\n")
        console.log(data);
        console.log(actionName)
        response = await new Promise(resolve => {

            console.log("Awaiting response\n");
            console.log(data);
            var xhr = new XMLHttpRequest();
            xhr.open("POST", baseUrlDefaultSearch, true);
            xhr.setRequestHeader("Content-Type", "application/json");

            xhr.onload = function (e) {
                resolve(xhr.response);
            };
            xhr.onerror = function () {
                resolve(undefined);
                console.error("** An error occurred during the XMLHttpRequest");
            };
            // body se nahe behj rahay tm? aisay he jata hay db k
            data["queried_by_username"] = "UsernameOfUser";

            console.log("\n\n\n ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ \n\n\n");
            console.log(data);
            xhr.send(JSON.stringify(data));
        })

        console.log("\n\nEmployeeee Details\n")
        console.log(JSON.parse(response));
        console.log(response.length);   

        if (JSON.parse(response).length == 0) {
            alert("Data Not Found, Please Try Something Else!");
            return;
        }

        var columnNames = Object.keys(JSON.parse(response)[0])
        console.log("COLUMN NAMES ARE AS FOLLOWS: \n");
        console.log(columnNames);

        console.log("db response %__%_%_%_%_%_%_ \n");
        console.log(response);

        this.showTableDataOnAttributesRecieved(columnNames, JSON.parse(response),JSON.parse(response).length,actionName)

    }



    function sendPostRequest() {

        console.log("\n\n\n ---- ")
        var attributesToShow = [];

        

        var searchQuery = document.getElementById("searchText").value;

        var allOptions = document.getElementsByClassName("parentOption");

        var selectedOptions = [];

        for (i = 0; i < allOptions.length; i++) {
            if (allOptions[i].children[0].checked) {
                console.log(allOptions[i].children[1].innerText);
                selectedOptions.push(allOptions[i].children[1].innerText);
            }

        }

        console.log("Selected options:\n");
        console.log(selectedOptions[0])
        console.log("----------\n");

        var data = {
            searchQuery: searchQuery,
            attributes: selectedOptions
        }


        
        console.log(data);
        
        for (i = 0; i < selectedOptions.length; i++) {
            console.log(selectedOptions[i]);
        }

       
        var employeeParams;
        var studentParams;

        if (selectedOptions[0] === "EmpName") {
             employeeParams = {
                 "actionName": "GetInstructorByName",
                "EmpName": data.searchQuery
            }
        }



        if (selectedOptions[0] === "Email") {
            employeeParams = {
                "actionName": "GetInstructorByEmail",
                "Email": data.searchQuery
            }
        }


        if (selectedOptions[0] === "Instructor by Designation ID") {
            employeeParams = {
                "actionName": "GetInstructorByRank",
                "DesignationTitle": data.searchQuery
            }
        }

        if (selectedOptions[0] === "DepartmentID") {
            employeeParams = {
                "actionName": "GetInstructorByDepartment",
                "DepartmentID": data.searchQuery
            }
        }

        if (selectedOptions[0] === "Name Starts With") {
            employeeParams = {
                "actionName": "GetInstructorByNameStartsWith",
                "EmpName": data.searchQuery
            }
        }


        if (selectedOptions[0] === "Name Contains") {
            employeeParams = {
                "actionName": "GetInstructorByNameContains",
                "EmpName": data.searchQuery
            }
        }


        if (selectedOptions[0] === "Instructors by Course Name") {
            employeeParams = {
                "actionName": "GetInstructorByCourseName",
                "CourseName": data.searchQuery
            }
        }


        if (selectedOptions[0] === "Instructors by Course CODE") {
            employeeParams = {
                "actionName": "GetInstructorByCourseCode",
                "CourseCode": data.searchQuery
            }
        }


        if (selectedOptions[0] === "Name Contains") {
            employeeParams = {
                "actionName": "GetInstructorByNameContains",
                "EmpName": data.searchQuery
            }
        }

        if (selectedOptions[0] === "Course Taught By") {
            employeeParams = {
                "actionName": "GetCoursesTaughtByASpecificInstructor",
                "EmpName": data.searchQuery
            }
        }

        //// STUDENTS

        if (selectedOptions[0] === "By Name Contains") {
            employeeParams = {
                "actionName": "GetStudentsByNameContains",
                "EmpName": data.searchQuery
            }
        }

        if (selectedOptions[0] === "By ID") {
            employeeParams = {
                "actionName": "GetStudentByStudentID",
                "RollNumber": data.searchQuery
            }
        }

        if (selectedOptions[0] === "By BatchID") {
            employeeParams = {
                "actionName": "GetStudentByBatchID",
                "BatchID": data.searchQuery
            }
        }


        if (selectedOptions[0] === "By NU-Mail") {
            employeeParams = {
                "actionName": "GetStudentByNUEmail",
                "Email": data.searchQuery
            }
        }

        if (selectedOptions[0] === "By NU-Mail") {
            employeeParams = {
                "actionName": "GetStudentByNUEmail",
                "Email": data.searchQuery
            }
        }

        if (selectedOptions[0] === "By Primary Email") {
            employeeParams = {
                "actionName": "GetStudentByPrimaryEmail",
                "Email": data.searchQuery
            }
        }

        if (selectedOptions[0] === "By Skill") {
            employeeParams = {
                "actionName": "GetStudentsBySkill",
                "Email": data.searchQuery
            }
        }

        if (selectedOptions[0] === "By Domain") {
            employeeParams = {
                "actionName": "GetStudentsByDomain",
                "Email": data.searchQuery
            }
        }
        if (employeeParams != null || employeeParams != undefined || employeeParams != "") {
            this.getDataBasedOnCheckedBoxes(employeeParams, employeeParams["actionName"]);
        } else {
            if (studentParams != null || studentParams != undefined || studentParams != "") {
                this.getDatabaseOnCheckedBoxes(studentParams, employeeParams["actionName"]);

            } else {
                alert("Query Could Not Be Processed!")
            }
        }
        

    }

    function showTableDataOnAttributesRecieved(attributesToShow,rows,length,actionName) {

        console.log("ACTION NAME  =>>>>>>>>>>>>>> " + " " + actionName)
        console.log("Numbers Of Rows To Display\n");
        console.log(length);


        

        console.log("Column Headers\n");
        console.log(attributesToShow)
        console.log("Number of header columns");
        console.log(attributesToShow.length)

        console.log("\nAll Rows\n")
        console.log(rows);





        if (attributesToShow[0] === "StudentID" ) {
            console.log("ATTRIBUETS TO SHOW at index 0 : " + " " + attributesToShow[0])

            var tableHeaderRow = document.getElementById("attributeheads");
            tableHeaderRow.innerHTML = "";
            tableHeaderRow.innerHTML += "<tr>";
            console.log("==============================");
            tableHeaderInner = "";

            for (i = 0; i < attributesToShow.length; i++) {
                console.log("==!!=>" + attributesToShow[i]);
                tableHeaderInner += '<th scope="col">' + attributesToShow[i] + '</th>';

            }
            tableHeaderRow.innerHTML += tableHeaderInner;
            tableHeaderRow.innerHTML += "</tr>";

            var tableBodyData = document.getElementById("tablebodydata");
            tableBodyData.innerHTML = "";


            var innerHTMLForBody = "";



            
                if (actionName === "GetStudentByNUEmail" || actionName === "GetStudentByPrimaryEmail") {

                console.log("\n\n ------------------------ EMAIL Student ------------------------------\n\n");

                for (i = 0; i < length; i++) {
                    innerHTMLForBody += "<tr>";
                    innerHTMLForBody += "<td>" + rows[i].StudentID + "</td>";
                    innerHTMLForBody += "<td>" + rows[i].SName + "</td>";
                    innerHTMLForBody += "<td>" + rows[i].Email + "</td>";
                    innerHTMLForBody += "<td>" + rows[i].MobileNumber + "</td>";
                    innerHTMLForBody += "<td>" + rows[i].RollNumber + "</td>";
                    innerHTMLForBody += "<td>" + rows[i].CandidateID + "</td>";
                    innerHTMLForBody += "<td>" + rows[i].BatchID + "</td>";
                    innerHTMLForBody += "<td>" + "**********" + "</td>";
                    innerHTMLForBody += "<td>" + rows[i].ProgrammeID + "</td>";
                    innerHTMLForBody += "<td>" + rows[i].CName + "</td>";
                    innerHTMLForBody += "<td>" + rows[i].CAddress + "</td>";
                    innerHTMLForBody += "<td>" + rows[i].Email + "</td>";
                    innerHTMLForBody += "<td>" + rows[i].ContactInfo + "</td>";
                    innerHTMLForBody += "<td>" + rows[i].HSCResult + "</td>";
                    innerHTMLForBody += "<td>" + "**********" + "</td>";
                    innerHTMLForBody += "</tr>";

                }

                } else
                {

                console.log("\n\n ------------------------ Normal Student ------------------------------\n\n");
                for (i = 0; i < length; i++) {
                    innerHTMLForBody += "<tr>";
                    innerHTMLForBody += "<td>" + rows[i].StudentID + "</td>";
                    innerHTMLForBody += "<td>" + rows[i].SName + "</td>";
                    innerHTMLForBody += "<td>" + rows[i].Email + "</td>";
                    innerHTMLForBody += "<td>" + rows[i].MobileNumber + "</td>";
                    innerHTMLForBody += "<td>" + rows[i].RollNumber + "</td>";
                    innerHTMLForBody += "<td>" + rows[i].CandidateID + "</td>";
                    innerHTMLForBody += "<td>" + rows[i].BatchID + "</td>";
                    innerHTMLForBody += "<td>" + "**********" + "</td>";
                    innerHTMLForBody += "<td>" + rows[i].ProgrammeID + "</td>";
                    innerHTMLForBody += "</tr>";

                }

            }

            tableBodyData.innerHTML = innerHTMLForBody;
           

        } else {

            var tableHeaderRow = document.getElementById("attributeheads");
            tableHeaderRow.innerHTML = "";
            tableHeaderRow.innerHTML += "<tr>";
            console.log("==============================");
            tableHeaderInner = "";

            for (i = 0; i < attributesToShow.length; i++) {
                console.log("==!!=>" + attributesToShow[i]);
                tableHeaderInner += '<th scope="col">' + attributesToShow[i] + '</th>';

            }
            tableHeaderRow.innerHTML += tableHeaderInner;
            tableHeaderRow.innerHTML += "</tr>";


            // console.log("LENGTH OF ROWS : " + rows.length);
            //console.log("LENGTH OF ROWS [0]: " + rows[0].length)


            var tableBodyData = document.getElementById("tablebodydata");
            tableBodyData.innerHTML = "";


            var innerHTMLForBody = "";



            //EMP NAME And most of them
            for (i = 0; i < length; i++) {

                console.log("VALUE OF i : " + i);

                innerHTMLForBody += "<tr>";

                if (attributesToShow.length == 1) {
                    innerHTMLForBody += "<td>" + rows[i].CourseName + "</td>";
                } else {
                    if (attributesToShow.length > 1 || attributesToShow.length <= 8) {
                        innerHTMLForBody += "<td>" + rows[i].EmpID + "</td>";
                        innerHTMLForBody += "<td>" + rows[i].EmpName + "</td>";
                        innerHTMLForBody += "<td>" + rows[i].Email + "</td>";
                        innerHTMLForBody += "<td>" + rows[i].MobileNumber + "</td>";
                        innerHTMLForBody += "<td>" + rows[i].DesignationID + "</td>";
                        innerHTMLForBody += "<td>" + rows[i].DepartmentID + "</td>";
                        innerHTMLForBody += "<td>" + rows[i].RefID + "</td>";
                        innerHTMLForBody += "<td>" + "**********" + "</td>";
                    }


                    if (attributesToShow.length > 8) {
                        innerHTMLForBody += "<td>" + rows[i].CFID + "</td>";
                        innerHTMLForBody += "<td>" + rows[i].NumberOfSection + "</td>";
                        innerHTMLForBody += "<td>" + rows[i].CourseOfferedID + "</td>";
                        innerHTMLForBody += "<td>" + rows[i].CreditHrs + "</td>";
                        innerHTMLForBody += "<td>" + rows[i].CourseNSections + "</td>";
                        innerHTMLForBody += "<td>" + rows[i].MaxStdPerSection + "</td>";
                        innerHTMLForBody += "<td>" + rows[i].BatchID + "</td>";
                        innerHTMLForBody += "<td>" + rows[i].SemesterID + "</td>";
                        innerHTMLForBody += "<td>" + rows[i].CourseID + "</td>";
                        innerHTMLForBody += "<td>" + rows[i].CourseName + "</td>";
                        innerHTMLForBody += "<td>" + rows[i].CourseCode + "</td>";


                    }
                }





                innerHTMLForBody += "</tr>";

            }



            if (actionName === "GetStudentsBySkill") {
                var tableHeaderRow = document.getElementById("attributeheads");
                tableHeaderRow.innerHTML = "";
                tableHeaderRow.innerHTML += "<tr>";
                console.log("==============================");
                tableHeaderInner = "";

                for (i = 0; i < attributesToShow.length; i++) {
                    console.log("==!!=>" + attributesToShow[i]);
                    tableHeaderInner += '<th scope="col">' + attributesToShow[i] + '</th>';

                }
                tableHeaderRow.innerHTML += tableHeaderInner;
                tableHeaderRow.innerHTML += "</tr>";

                var tableBodyData = document.getElementById("tablebodydata");
                tableBodyData.innerHTML = "";


                var innerHTMLForBody = "";
                for (i = 0; i < length; i++) {
                    innerHTMLForBody += "<tr>";
                    innerHTMLForBody += "<td>" + rows[i].RefID + "</td>";
                    innerHTMLForBody += "<td>" + rows[i].StudentID + "</td>";
                    innerHTMLForBody += "<td>" + rows[i].SkillID + "</td>";
                    innerHTMLForBody += "<td>" + rows[i].SkillName + "</td>";
                    innerHTMLForBody += "<td>" + rows[i].DomainID + "</td>";
                    innerHTMLForBody += "<td>" + rows[i].SName + "</td>";
                    innerHTMLForBody += "<td>" + rows[i].Email + "</td>";
                    innerHTMLForBody += "<td>" + rows[i].MobileNumber + "</td>";
                    innerHTMLForBody += "<td>" + rows[i].RollNumber + "</td>";
                    innerHTMLForBody += "<td>" + rows[i].CandidateID + "</td>";
                    innerHTMLForBody += "<td>" + rows[i].BatchID + "</td>";
                    innerHTMLForBody += "<td>" + "**********" + "</td>";
                    innerHTMLForBody += "<td>" + rows[i].ProgrammeID + "</td>";
                    innerHTMLForBody += "</tr>";

                }
                innerHTMLForBody += "</tr>";

            }


            tableBodyData.innerHTML += innerHTMLForBody;

       // <tbody id="tablebodydata"></tbody>

        }


        //HEADER ROW
        //<th scope="col">StudentID</th>

       


        //DATA ROW  / tablebodydata
        /**
         *
         *   <tr>
                <th scope="row">1</th>
                <td>Mark</td>
                <td>Otto</td>
                <td>mdo</td>
                <td>Otto</td>
                <td>mdo</td>
                <td>Otto</td>
                <td>mdo</td>
                <td>Otto</td>
                <td>mdo</td>
             </tr>
         *
         *  **/

        



    }

    function setOptions(tableName) {
        var options = document.getElementById("optionsDiv");
        options.innerHTML = "";

        //alert(tableName);

        var attrs = database[tableName];
        console.log(attrs);

        for (i = 0; i < attrs.length; i++) {
            options.innerHTML += '<label class="form-check-label parentOption"><input id="option" type ="checkbox" class="optionsclass form-check-input pr-20" value = "" ><span class="option">' + attrs[i] + '</span></label>';

        }




    }

    function debugState() {
        console.log("text: " + isTextInserted + " dropwdown: " + isDropDownSelected);
    }

    function onClickDropDown() {
        console.log("On Click Drop Down");
        this.debugState();
        if (document.getElementById("dropDownButton").innerHTML === "Select Table") {
            isDropDownSelected = false;
        } else {

            isDropDownSelected = true;
        }

        this.setStateToButton();
    }


    function dropDownSet(itemName) {

        console.log("DROP DOWN SET")
        buttonName = itemName.innerHTML;

        this.setOptions(buttonName);
        console.log(buttonName);

        var button_ = document.getElementById("dropDownButton");
        button_.innerText = buttonName;
        var selectoptionstag = document.getElementById("selectoptions");
        if (selectoptionstag != null)
            selectoptionstag.hidden = true;


        var dropDownButton = document.getElementById("dropDownButton")
        dropDownButton.innerHTML = buttonName;

        isDropDownSelected = true;
        this.setStateToButton();

    }


    function success() {

        if (document.getElementById("searchText").value === "") {
            isTextInserted = false;
            this.setStateToButton();
        } else {
            isTextInserted = true;
            this.setStateToButton();
        }

    }

    function setStateToButton() {
        console.log("In set state");
        debugState();
        if (isTextInserted && isDropDownSelected) {
            console.log("Enable the button :)");
            document.getElementById('searchButton').disabled = false;
        } else {
            document.getElementById('searchButton').disabled = true;

        }

    }


    function display(searchToDisplay) {

        var defaultsearch = "defaultsearch";
        var fypstudentsearch = "fypstudentsearch";
        var fypmetadatasearch = "fypmetadatasearch";


        var searchToShow = document.getElementById(searchToDisplay);

        if (searchToDisplay === defaultsearch) {

            document.getElementById("defaultsearchBtn").classList.add('btn-primary');
            document.getElementById("defaultsearchBtn").classList.remove('btn-outline-primary');

            document.getElementById("fypstudentsearchBtn").classList.remove('btn-primary');
            document.getElementById("fypstudentsearchBtn").classList.add('btn-outline-primary');

            document.getElementById("fypmetadatasearchBtn").classList.remove('btn-primary');
            document.getElementById("fypmetadatasearchBtn").classList.add('btn-outline-primary');

            searchToShow.style.display = "block";
            var notToShow = document.getElementById(fypmetadatasearch);
            var notToShow2 = document.getElementById(fypstudentsearch);
            notToShow.style.display = "none";
            notToShow2.style.display = "none";


        }
        if (searchToDisplay === fypstudentsearch) {

            document.getElementById("defaultsearchBtn").classList.remove('btn-primary');
            document.getElementById("defaultsearchBtn").classList.add('btn-outline-primary');


            document.getElementById("fypstudentsearchBtn").classList.add('btn-primary');
            document.getElementById("fypstudentsearchBtn").classList.remove('btn-outline-primary');

            document.getElementById("fypmetadatasearchBtn").classList.remove('btn-primary');
            document.getElementById("fypmetadatasearchBtn").classList.add('btn-outline-primary');

            searchToShow.style.display = "block";
            var notToShow = document.getElementById(fypmetadatasearch);
            var notToShow2 = document.getElementById(defaultsearch);
            notToShow.style.display = "none";
            notToShow2.style.display = "none";
        }
        if (searchToDisplay === fypmetadatasearch) {

            document.getElementById("fypstudentsearchBtn").classList.remove('btn-primary');
            document.getElementById("fypstudentsearchBtn").classList.add('btn-outline-primary');


            document.getElementById("fypmetadatasearchBtn").classList.add('btn-primary');
            document.getElementById("fypmetadatasearchBtn").classList.remove('btn-outline-primary');

            document.getElementById("defaultsearchBtn").classList.remove('btn-primary');
            document.getElementById("defaultsearchBtn").classList.add('btn-outline-primary');

            searchToShow.style.display = "block";
            var notToShow = document.getElementById(defaultsearch);
            var notToShow2 = document.getElementById(fypstudentsearch);
            notToShow.style.display = "none";
            notToShow2.style.display = "none";
        }



    }


    function showRangeInput(radioButton) {
        var radio_button = document.getElementById(radioButton);
        if (radioButton === "range" && radio_button.checked) {
            var minRange = document.getElementById("minRange");
            var maxRange = document.getElementById("maxRange");

            minRange.disabled = false;
            maxRange.disabled = false;

            var exactValue = document.getElementById("exactValue");
            exactValue.disabled = true;


        } else {
            var minRange = document.getElementById("minRange");
            var maxRange = document.getElementById("maxRange");

            minRange.disabled = true;
            maxRange.disabled = true;

            var exactValue = document.getElementById("exactValue");
            exactValue.disabled = false;
        }
    }


    function postFypStudentSearch() {

        var studentNames;
        var studentIds;
        var batches;
        var gpas;
    }
</script>
